CREATE TABLE SONG (
    id INT NOT NULL AUTO_INCREMENT,
    title VARCHAR(20) NOT NULL,
    user_id INT NOT NULL,
    album_id INT,
    file_path VARCHAR(200),
    length_seconds INT NOT NULL,
    uploaded DATETIME DEFAULT CURRENT_TIMESTAMP,
    size INT NOT NULL,
    rating FLOAT NOT NULL DEFAULT(3.0),
    PRIMARY KEY (id)
);

CREATE TABLE USER (
    id INT NOT NULL AUTO_INCREMENT,
    name VARCHAR(20) NOT NULL,
    password VARCHAR(20) NOT NULL,
    date_created DATETIME DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id)
);

CREATE TABLE ALBUM (
    id INT NOT NULL AUTO_INCREMENT,
    title VARCHAR(20) NOT NULL,
    user_id INT NOT NULL,
    date_created DATETIME DEFAULT CURRENT_TIMESTAMP,
    song_cout INT NOT NULL DEFAULT(0),
    PRIMARY KEY (id)
);

CREATE TABLE PLAYLIST (
    id INT NOT NULL AUTO_INCREMENT,
    title VARCHAR(20) NOT NULL,
    user_id INT NOT NULL,
    song_count INT NOT NULL DEFAULT(0),
    date_created DATETIME DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id)
);

CREATE TABLE TAG (
    id INT NOT NULL AUTO_INCREMENT,
    name VARCHAR(20) NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE RATING (
    user_id INT NOT NULL,
    song_id INT NOT NULL,
    rating INT NOT NULL
);

CREATE TABLE STREAM (
    id INT NOT NULL AUTO_INCREMENT,
    user_id INT NOT NULL,
    song_id INT NOT NULL,
    date_streamed DATETIME DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id)
);

CREATE TABLE ALBUM_TAG (
    album_id INT NOT NULL,
    tag_id INT NOT NULL
);

CREATE TABLE SONG_TAG (
    song_id INT NOT NULL,
    tag_id INT NOT NULL
);

CREATE TABLE SONG_PLAYLIST (
    playlist_id INT NOT NULL,
    song_id INT NOT NULL
);

ALTER TABLE SONG
ADD FOREIGN KEY (user_id) REFERENCES USER(id),
ADD FOREIGN KEY (album_id) REFERENCES ALBUM(id) ON DELETE SET NULL;

ALTER TABLE ALBUM
ADD FOREIGN KEY (user_id) REFERENCES USER(id);

ALTER TABLE PLAYLIST
ADD FOREIGN KEY (user_id) REFERENCES USER(id);

ALTER TABLE RATING
ADD FOREIGN KEY (user_id) REFERENCES USER(id),
ADD FOREIGN KEY (song_id) REFERENCES SONG(id) ON DELETE CASCADE,
ADD PRIMARY KEY (user_id, song_id);

ALTER TABLE STREAM
ADD FOREIGN KEY (user_id) REFERENCES USER(id),
ADD FOREIGN KEY (song_id) REFERENCES SONG(id) ON DELETE CASCADE;

ALTER TABLE ALBUM_TAG
ADD FOREIGN KEY (album_id) REFERENCES ALBUM(id) ON DELETE CASCADE,
ADD FOREIGN KEY (tag_id) REFERENCES TAG(id),
ADD PRIMARY KEY (album_id, tag_id);

ALTER TABLE SONG_TAG
ADD FOREIGN KEY (song_id) REFERENCES SONG(id) ON DELETE CASCADE,
ADD FOREIGN KEY (tag_id) REFERENCES TAG(id),
ADD PRIMARY KEY (song_id, tag_id);

ALTER TABLE SONG_PLAYLIST
ADD FOREIGN KEY (song_id) REFERENCES SONG(id) ON DELETE CASCADE,
ADD FOREIGN KEY (playlist_id) REFERENCES PLAYLIST(id) ON DELETE CASCADE,
ADD PRIMARY KEY (song_id, playlist_id);

CREATE TRIGGER UPDATE_SONG_RATING
AFTER INSERT ON RATING
FOR EACH ROW
	UPDATE SONG SET SONG.rating = (
		(SELECT SUM(RATING.rating)
		FROM RATING
		WHERE RATING.song_id = SONG.id)
        / 
        (SELECT COUNT(1)
        FROM RATING
        WHERE RATING.song_id = SONG.id))
	WHERE SONG.id = NEW.song_id;
    
CREATE TRIGGER UPDATE_SONG_RATING_2
AFTER UPDATE ON RATING
FOR EACH ROW
	UPDATE SONG SET SONG.rating = (
		(SELECT SUM(RATING.rating)
		FROM RATING
		WHERE RATING.song_id = SONG.id)
        / 
        (SELECT COUNT(1)
        FROM RATING
        WHERE RATING.song_id = SONG.id))
	WHERE SONG.id = NEW.song_id;
    
CREATE TRIGGER UPDATE_PLAYLIST_SONG_COUNT
AFTER INSERT ON SONG_PLAYLIST
FOR EACH ROW
	UPDATE PLAYLIST SET song_count = song_count + 1
    WHERE PLAYLIST.id = NEW.playlist_id;